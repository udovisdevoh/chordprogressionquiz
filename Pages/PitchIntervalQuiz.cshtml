@page
@model ChordProgressionQuiz.Pages.PitchIntervalQuizModel
@{
    ViewData["Title"] = "Pitch Interval Quiz";
}

@* Hidden div to store data for JavaScript *@
<div id="quiz-data" data-interval="@Model.IntervalJson"></div>

<div class="text-center">
    <h1 class="display-4">Pitch Interval Quiz 🎵</h1>
    <p class="lead">Listen to the two notes and guess the interval.</p>
</div>

<div class="container text-center mt-4">
    <div class="row justify-content-center g-3">
        <div class="col-auto">
            <div class="stat-box p-3 border rounded">
                <h5 class="stat-title mb-0">Current Score</h5>
                <p id="current-score" class="stat-value display-6 mb-0">0</p>
            </div>
        </div>
        <div class="col-auto">
            <div class="stat-box p-3 border rounded">
                <h5 class="stat-title mb-0">Max Score</h5>
                <p id="max-score" class="stat-value display-6 mb-0">0</p>
            </div>
        </div>
    </div>
</div>


<div class="container text-center mt-4 mb-4">
    <div class="row justify-content-center align-items-center g-3">
        <div class="col-auto">
            <button id="play-interval-btn" class="btn btn-primary btn-lg">
                <i class="fas fa-play"></i> Play Interval
            </button>
        </div>
        <div class="col-auto">
            <div class="form-check form-switch ps-5">
                <input class="form-check-input" type="checkbox" role="switch" id="loop-playback-switch" asp-for="LoopPlayback" style="transform: scale(1.5);">
                <label class="form-check-label ps-2" for="loop-playback-switch">Loop</label>
            </div>
        </div>
        <div class="col-auto">
            <form method="post" asp-page-handler="Next" id="next-interval-form" class="d-inline">
                <input type="hidden" asp-for="LoopPlayback" id="loop-playback-hidden-next" />
                <button type="submit" class="btn btn-info btn-lg">
                    Next <i class="fas fa-arrow-right"></i>
                </button>
            </form>
        </div>
    </div>
</div>

<div class="container mt-4">
    <div id="answer-feedback" class="text-center h4 mb-3" style="min-height: 1.5em;">&nbsp;</div>
    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-3 justify-content-center" id="answer-buttons-container">
        @foreach (var name in Model.AllIntervalNames)
        {
            <div class="col">
                <button class="btn btn-outline-dark w-100 p-3 answer-button" data-interval-name="@name">
                    @name
                </button>
            </div>
        }
    </div>
</div>

<div class="container mt-5">
    <h3 class="text-center">Session Statistics</h3>
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Interval</th>
                    <th>Success</th>
                    <th>Attempts</th>
                    <th>Success Rate</th>
                </tr>
            </thead>
            <tbody id="stats-table-body">
            </tbody>
            <tfoot id="stats-table-foot">
            </tfoot>
        </table>
    </div>
</div>


@section Scripts {
    <script src="https://kit.fontawesome.com/69115159a6.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- 1. SETUP ---
            const quizDataEl = document.getElementById('quiz-data');
            if (!quizDataEl) {
                console.error('Quiz data element not found!');
                return;
            }

            const intervalData = JSON.parse(quizDataEl.dataset.interval);
            const correctAnswerName = intervalData.IntervalName;
            const notes = [intervalData.StartNoteMidi, intervalData.EndNoteMidi];
            const allIntervalNames = @Html.Raw(Json.Serialize(Model.AllIntervalNames));


            const playBtn = document.getElementById('play-interval-btn');
            const loopSwitch = document.getElementById('loop-playback-switch');
            const loopHiddenInput = document.getElementById('loop-playback-hidden-next');
            const answerButtons = document.querySelectorAll('.answer-button');
            const feedbackEl = document.getElementById('answer-feedback');

            // Score elements and variables
            const currentScoreEl = document.getElementById('current-score');
            const maxScoreEl = document.getElementById('max-score');
            let currentScore = parseInt(localStorage.getItem('intervalQuiz_currentScore')) || 0;
            let maxScore = parseInt(localStorage.getItem('intervalQuiz_maxScore')) || 0;

            let hasAnswered = false;

            const piano = new Tone.Sampler({
                urls: { "C4": "C4.mp3", "F#4": "Fs4.mp3", "A4": "A4.mp3" },
                release: 1,
                baseUrl: "https://tonejs.github.io/audio/salamander/",
            }).toDestination();

            // --- NEW: SESSION STATS LOGIC ---
            const statsTableBody = document.getElementById('stats-table-body');
            const statsTableFoot = document.getElementById('stats-table-foot');

            function getSessionStats() {
                const statsJson = sessionStorage.getItem('intervalQuiz_sessionStats');
                if (statsJson) {
                    return JSON.parse(statsJson);
                }
                // Initialize stats if they don't exist
                const initialStats = {};
                allIntervalNames.forEach(name => {
                    initialStats[name] = { success: 0, attempts: 0 };
                });
                return initialStats;
            }

            let sessionStats = getSessionStats();

            function updateStatsDisplay() {
                statsTableBody.innerHTML = ''; // Clear previous stats
                let totalSuccess = 0;
                let totalAttempts = 0;

                allIntervalNames.forEach(name => {
                    const stat = sessionStats[name];
                    const successRate = stat.attempts > 0 ? ((stat.success / stat.attempts) * 100).toFixed(0) + '%' : 'N/A';

                    const row = `<tr>
                        <td>${name}</td>
                        <td>${stat.success}</td>
                        <td>${stat.attempts}</td>
                        <td>${successRate}</td>
                    </tr>`;
                    statsTableBody.innerHTML += row;

                    totalSuccess += stat.success;
                    totalAttempts += stat.attempts;
                });

                const totalSuccessRate = totalAttempts > 0 ? ((totalSuccess / totalAttempts) * 100).toFixed(0) + '%' : 'N/A';
                statsTableFoot.innerHTML = `<tr class="table-dark">
                    <th>Total</th>
                    <th>${totalSuccess}</th>
                    <th>${totalAttempts}</th>
                    <th>${totalSuccessRate}</th>
                </tr>`;
            }

            function updateSessionStats(isCorrect) {
                const intervalName = correctAnswerName;
                sessionStats[intervalName].attempts++;
                if (isCorrect) {
                    sessionStats[intervalName].success++;
                }
                sessionStorage.setItem('intervalQuiz_sessionStats', JSON.stringify(sessionStats));
                updateStatsDisplay();
            }

            // --- SCORE LOGIC ---
            function updateScoreDisplay() {
                currentScoreEl.textContent = currentScore;
                maxScoreEl.textContent = maxScore;
            }

            function handleCorrectAnswer() {
                currentScore++;
                if (currentScore > maxScore) {
                    maxScore = currentScore;
                    localStorage.setItem('intervalQuiz_maxScore', maxScore);
                }
                localStorage.setItem('intervalQuiz_currentScore', currentScore);
                updateScoreDisplay();
                updateSessionStats(true); // NEW
            }

            function handleWrongAnswer() {
                currentScore = 0;
                localStorage.setItem('intervalQuiz_currentScore', currentScore);
                updateScoreDisplay();
                updateSessionStats(false); // NEW
            }

            // --- PLAYBACK LOGIC ---
            function midiToNoteName(midi) {
                const noteNames = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
                const octave = Math.floor(midi / 12) - 1;
                const noteIndex = midi % 12;
                return noteNames[noteIndex] + octave;
            }

            const note1 = midiToNoteName(notes[0]);
            const note2 = midiToNoteName(notes[1]);

            const sequence = new Tone.Sequence((time, note) => {
                piano.triggerAttackRelease(note, "8n", time);
            }, [note1, note2], "2n").start(0);
            sequence.loop = loopSwitch.checked;

            function playInterval() {
                if (Tone.context.state !== 'running') {
                    Tone.context.resume();
                }

                if (Tone.Transport.state === 'started') {
                    Tone.Transport.stop();
                    Tone.Transport.position = 0;
                }

                Tone.Transport.start();
            }

            // --- EVENT LISTENERS ---
            playBtn.addEventListener('click', playInterval);

            loopSwitch.addEventListener('change', (e) => {
                sequence.loop = e.target.checked;
                loopHiddenInput.value = e.target.checked;
                if (!e.target.checked && Tone.Transport.state === 'started') {
                    Tone.Transport.stop();
                }
            });

            answerButtons.forEach(button => {
                button.addEventListener('click', function() {
                    if (hasAnswered) return;
                    hasAnswered = true;

                    const userAnswer = this.dataset.intervalName;

                    sequence.loop = false;
                    Tone.Transport.stop();

                    if (userAnswer === correctAnswerName) {
                        this.classList.remove('btn-outline-dark');
                        this.classList.add('btn-success');
                        feedbackEl.textContent = 'Correct!';
                        feedbackEl.className = 'text-center h4 mb-3 text-success';
                        handleCorrectAnswer();
                    } else {
                        this.classList.remove('btn-outline-dark');
                        this.classList.add('btn-danger');
                        feedbackEl.innerHTML = `Wrong! The correct answer was <strong>${correctAnswerName}</strong>.`;
                        feedbackEl.className = 'text-center h4 mb-3 text-danger';
                        handleWrongAnswer();

                        const correctButton = document.querySelector(`[data-interval-name="${correctAnswerName}"]`);
                        if (correctButton) {
                            correctButton.classList.remove('btn-outline-dark');
                            correctButton.classList.add('btn-success');
                        }
                    }

                     answerButtons.forEach(btn => {
                        btn.disabled = true;
                    });
                });
            });

            // --- INITIALIZATION ---
            updateScoreDisplay();
            updateStatsDisplay(); // NEW: Render stats on page load

            // Auto-play on load once Tone.js is ready
            Tone.loaded().then(() => {
                playInterval();
            });
        });
    </script>
}