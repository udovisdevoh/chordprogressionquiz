@page
@model ChordProgressionQuiz.Pages.ChordPickerModel
@{
    ViewData["Title"] = "Your Chord Progression";
}

<div class="text-center">
    <h1 class="display-4">Your Chord Progression</h1>
    @if (Model.RandomProgression != null)
    {
        <div class="card mt-4 mx-auto" style="max-width: 600px;">
            <div class="card-header bg-primary text-white rounded-top">
                <h4 class="mb-0">Song: <span id="songName">@Model.RandomProgression.Song</span></h4>
            </div>
            <div class="card-body">
                <h5 class="card-title text-info">Keys Example: <span id="keysExample">@Model.RandomProgression.KeysExample</span></h5>
                <p class="card-text">
                    <strong>Tonal:</strong> <span id="tonalRomanNumerals">@Model.RandomProgression.Tonal?.RomanNumerals</span> (relative to <span id="tonalRelativeTo">@Model.RandomProgression.Tonal?.RelativeTo)</span>
                </p>
                <div id="modalSection" style="display:none;">
                    <p class="card-text">
                        <strong>Modal:</strong>
                        <span id="modalList">
                        </span>
                    </p>
                </div>
                <p class="card-text"><strong>Substitution Group:</strong> <span id="substitutionGroup">@(Model.RandomProgression.SubstitutionGroup.HasValue? Model.RandomProgression.SubstitutionGroup.ToString() : "N/A")</span></p>
                <p class="card-text"><strong>Palindromic Group:</strong> <span id="palindromicGroup">@(Model.RandomProgression.PalindromicGroup.HasValue? Model.RandomProgression.PalindromicGroup.ToString() : "N/A")</span></p>
                <p class="card-text"><strong>Rotation Group:</strong> <span id="rotationGroup">@(Model.RandomProgression.RotationGroup.HasValue? Model.RandomProgression.RotationGroup.ToString() : "N/A")</span></p>

                <hr />
                @if (Model.AbsoluteProgression != null && Model.AbsoluteProgression.Chords.Any())
                {
                    <div id="baseMidiPitchesSection">
                        <h5 class="card-title text-success mt-3">Base MIDI Pitches:</h5>
                        <p class="card-text" id="baseMidiPitches">
                            @* Content will be populated by JavaScript *@
                        </p>
                    </div>
                    <h5 class="card-title text-primary mt-3">Stylized Playback Details:</h5>
                    <div id="stylizedPlaybackDetailsSection">
                        @if (Model.StylizedProgression != null && Model.StylizedProgression.MidiEvents.Any())
                        {
                            <p class="card-text" id="totalMidiEvents">
                                @* Content will be populated by JavaScript *@
                            </p>
                        }
                        else
                        {
                            <p class="alert alert-info mt-3">No stylized playback data available.</p>
                        }
                    </div>
                    @* UPDATED: Sound System Controls Layout - Removed Pause, Less Saturated Colors *@
                    <div class="d-flex justify-content-center align-items-center mt-3 mb-3">
                        <form method="post" class="d-inline-block mx-1 my-1" id="previousTrackForm">
                            @* Added ID for JS submission *@
                            <input type="hidden" asp-for="CurrentProgressionIndex" />
                            <input type="hidden" asp-for="EnableStylizedPlayback" />
                            <input type="hidden" asp-for="LoopPlayback" />
                            <button type="submit" asp-page-handler="Previous" class="btn btn-outline-primary btn-lg">⏮️ Previous</button> @* Less saturated *@
                        </form>

                        <button id="playButton" class="btn btn-outline-success btn-lg mx-1">▶️ Play</button> @* Less saturated *@
                        <button id="stopButton" class="btn btn-outline-danger btn-lg mx-1">⏹️ Stop</button> @* Less saturated *@

                        <form method="post" class="d-inline-block mx-1 my-1" id="nextTrackForm">
                            @* Added ID for JS submission *@
                            <input type="hidden" asp-for="CurrentProgressionIndex" />
                            <input type="hidden" asp-for="EnableStylizedPlayback" />
                            <input type="hidden" asp-for="LoopPlayback" />
                            <button type="submit" asp-page-handler="Next" class="btn btn-outline-primary btn-lg">Next ⏭️</button> @* Less saturated *@
                        </form>
                    </div>

                    <div id="loadingMessage" class="mt-2 text-muted" style="display:none;">Loading instruments...</div>
                }
                else
                {
                    <p class="alert alert-info mt-3">Could not generate MIDI pitches for this progression.</p>
                }
            </div>
        </div>
        <p class="mt-2" id="progressionIndexCount">Progression @(Model.CurrentProgressionIndex + 1) of @Model.ChordService.GetProgressionCount()</p>

    }
    else
    {
        <p class="alert alert-warning mt-4">No chord progression found. Please ensure the 'chordProgressions.json' file is correctly placed in the 'Data' folder and contains valid data.</p>
    }
    <div class="mt-4 d-flex justify-content-center align-items-center flex-wrap">
        <form method="post" asp-page-handler="ToggleStylizedPlayback" class="d-inline-flex align-items-center mx-2 my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="LoopPlayback" />
            <input type="checkbox" asp-for="EnableStylizedPlayback"
                   onchange="this.form.submit()" class="form-check-input me-1" />
            <label asp-for="EnableStylizedPlayback" class="form-check-label">Enable Stylized Playback</label>
        </form>

        <form method="post" asp-page-handler="ToggleLoopPlayback" class="d-inline-flex align-items-center mx-2 my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="EnableStylizedPlayback" />
            <input type="checkbox"
                   asp-for="LoopPlayback" onchange="this.form.submit()" class="form-check-input me-1" id="loopPlaybackCheckbox" />
            <label asp-for="LoopPlayback" class="form-check-label">Loop Playback</label>
        </form>

        @* Get Random Progression Button: Now a form button for consistency and robustness *@
        <form method="get" asp-page="/ChordPicker" class="d-inline-block mx-2 my-1" id="randomProgressionForm">
            @* Added ID for JS submission *@
            <input type="hidden" name="EnableStylizedPlayback" value="@Model.EnableStylizedPlayback.ToString().ToLowerInvariant()" />
            <input type="hidden" name="LoopPlayback" value="@Model.LoopPlayback.ToString().ToLowerInvariant()" />
            <button type="submit" class="btn btn-outline-success btn-lg">Get Random Progression</button> @* Less saturated *@
        </form>

        @* Original First/Last navigation buttons (now less prominent or can be removed if desired) *@
        <form method="post" class="d-inline-block my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="EnableStylizedPlayback" />
            <input type="hidden" asp-for="LoopPlayback" />
            <button type="submit" asp-page-handler="First" class="btn btn-outline-secondary btn-lg mx-1">First</button> @* Less saturated *@
        </form>

        <form method="post" class="d-inline-block my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="EnableStylizedPlayback" />
            <input type="hidden" asp-for="LoopPlayback" />
            <button type="submit" asp-page-handler="Last" class="btn btn-outline-secondary btn-lg mx-1">Last</button> @* Less saturated *@
        </form>

        <a asp-page="/Index" class="btn btn-outline-secondary btn-lg mx-2 my-1">Back to Home</a> @* Less saturated *@
    </div>
</div>

@section Scripts {
    <script src="~/js/soundfont-player.min.js"></script>
    <script src="~/js/midiPlayer.js"></script>
    <script src="~/js/chordDisplay.js"></script>
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            const playButton = document.getElementById('playButton');
            const stopButton = document.getElementById('stopButton');

            const loadingMessage = document.getElementById('loadingMessage');
            const loopPlaybackCheckbox = document.getElementById('loopPlaybackCheckbox');

            // Get navigation forms by ID
            const previousTrackForm = document.getElementById('previousTrackForm');
            const nextTrackForm = document.getElementById('nextTrackForm');
            const randomProgressionForm = document.getElementById('randomProgressionForm');
            const toggleStylizedPlaybackForm = document.querySelector('form[asp-page-handler="ToggleStylizedPlayback"]'); // Get by handler
            const toggleLoopPlaybackForm = document.querySelector('form[asp-page-handler="ToggleLoopPlayback"]'); // Get by handler

            // Prepare data for JavaScript
            const progressionData = @Html.Raw(Json.Serialize(Model.StylizedProgression?.MidiEvents ?? new List<StylizedMidiEvent>()));
            const displayData = {
                songName: @Html.Raw(Json.Serialize(Model.RandomProgression?.Song)),
                keysExample: @Html.Raw(Json.Serialize(Model.RandomProgression?.KeysExample)),
                tonalRomanNumerals: @Html.Raw(Json.Serialize(Model.RandomProgression?.Tonal?.RomanNumerals)),
                tonalRelativeTo: @Html.Raw(Json.Serialize(Model.RandomProgression?.Tonal?.RelativeTo)),
                modalList: @Html.Raw(Json.Serialize(Model.RandomProgression?.Modal ?? new List<Modal>())),
                substitutionGroup: @Html.Raw(Json.Serialize(Model.RandomProgression?.SubstitutionGroup)),
                palindromicGroup: @Html.Raw(Json.Serialize(Model.RandomProgression?.PalindromicGroup)),
                rotationGroup: @Html.Raw(Json.Serialize(Model.RandomProgression?.RotationGroup)),
                absoluteChords: @Html.Raw(Json.Serialize(Model.AbsoluteProgression?.Chords ?? new List<MidiChord>())),
                currentProgressionIndex: @Html.Raw(Json.Serialize(Model.CurrentProgressionIndex)),
                totalProgressionCount: @Html.Raw(Json.Serialize(Model.ChordService.GetProgressionCount()))
            };

            const totalProgressionDuration = progressionData.length > 0 ?
                Math.max(...progressionData.map(e => e.startTime + e.duration)) : 0;

            // Populate display using chordDisplay.js
            window.chordDisplay.updateChordDisplay(displayData);

            // Set initial checkbox state for loopPlayback (server-side model is source of truth)
            if (loopPlaybackCheckbox) {
                loopPlaybackCheckbox.checked = @Html.Raw(Json.Serialize(Model.LoopPlayback));
            }

            // Playback state persistence keys
            const IS_PLAYING_KEY = 'isPlaying';
            const LOOP_ENABLED_KEY = 'loopEnabled'; // Store loop state explicitly for restart
            const STYLIZED_ENABLED_KEY = 'stylizedEnabled'; // Store stylized state explicitly for restart

            // --- Intercept form submissions to store playing state ---
            // List of forms that trigger a page navigation
            const navigationForms = [
                previousTrackForm,
                nextTrackForm,
                randomProgressionForm,
                toggleStylizedPlaybackForm,
                toggleLoopPlaybackForm // If this form changes, we also want to persist playing state
            ].filter(Boolean); // Filter out any nulls if an ID wasn't found

            navigationForms.forEach(form => {
                form.addEventListener('submit', () => {
                    if (midiPlayer.isPlaying()) { // Check current playing status
                        sessionStorage.setItem(IS_PLAYING_KEY, 'true');
                        // Store current settings to re-apply them on next page load
                        sessionStorage.setItem(LOOP_ENABLED_KEY, loopPlaybackCheckbox ? loopPlaybackCheckbox.checked.toString() : 'false');
                        sessionStorage.setItem(STYLIZED_ENABLED_KEY, (document.getElementById('enableStylizedPlayback')?.checked || false).toString());
                    } else {
                        sessionStorage.removeItem(IS_PLAYING_KEY); // Clear if not playing
                        sessionStorage.removeItem(LOOP_ENABLED_KEY);
                        sessionStorage.removeItem(STYLIZED_ENABLED_KEY);
                    }
                    midiPlayer.stopAllNotes(false); // Stop notes but don't clear session storage from midiPlayer's side
                });
            });

            // --- Initial playback on page load if state was persisted ---
            const shouldResumePlaying = sessionStorage.getItem(IS_PLAYING_KEY) === 'true';
            // Also retrieve previous settings for consistency
            const prevLoopEnabled = sessionStorage.getItem(LOOP_ENABLED_KEY) === 'true';
            const prevStylizedEnabled = sessionStorage.getItem(STYLIZED_ENABLED_KEY) === 'true';

            // Clear session storage flags immediately after reading them
            sessionStorage.removeItem(IS_PLAYING_KEY);
            sessionStorage.removeItem(LOOP_ENABLED_KEY);
            sessionStorage.removeItem(STYLIZED_ENABLED_KEY);


            if (playButton && progressionData && progressionData.length > 0) {
                playButton.addEventListener('click', async function () {
                    const instrumentsLoaded = await window.midiPlayer.loadInstruments(loadingMessage, playButton);
                    if (instrumentsLoaded) {
                        window.midiPlayer.stopAllNotes(true); // Stop existing, clear flags for fresh start
                        const loopEnabledForPlayback = loopPlaybackCheckbox ? loopPlaybackCheckbox.checked : false;
                        window.midiPlayer.playProgression(progressionData, loopEnabledForPlayback, totalProgressionDuration);
                    }
                });
            } else if (playButton) {
                playButton.disabled = true;
                playButton.textContent = "No MIDI to Play";
            }

            // NEW: Stop button listener
            if (stopButton) {
                stopButton.addEventListener('click', function() {
                    window.midiPlayer.stopAllNotes(true); // Stop and clear flags
                });
            }

            // --- Auto-play on load if state was persisted from previous page ---
            if (shouldResumePlaying) {
                // Ensure UI reflects the previous state before playing
                // These checkboxes submit forms, but we need to ensure the *current* page's Model state matches what was playing
                // If Model.EnableStylizedPlayback doesn't match prevStylizedEnabled, or Model.LoopPlayback doesn't match prevLoopEnabled,
                // the behavior might be unexpected. For now, assume the Model state is passed correctly via asp-route.

                // Trigger play if there's progression data
                if (playButton && progressionData && progressionData.length > 0) {
                     window.midiPlayer.loadInstruments(loadingMessage, playButton).then(instrumentsLoaded => {
                        if (instrumentsLoaded) {
                            // Ensure the loop state used for auto-play matches what was saved.
                            // However, the `playProgression` will use the `loopEnabledForPlayback` which is derived from the *current* checkbox state on this page load.
                            // If the checkbox was changed (and submitted) on the previous page, Model.LoopPlayback (and thus the checkbox state) should already be correct.
                            window.midiPlayer.playProgression(progressionData, @Html.Raw(Json.Serialize(Model.LoopPlayback)), totalProgressionDuration);
                        }
                    });
                }
            }
        });
    </script>
}