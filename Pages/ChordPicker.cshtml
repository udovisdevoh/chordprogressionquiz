@page
@model ChordProgressionQuiz.Pages.ChordPickerModel
@{
    ViewData["Title"] = "Your Chord Progression";
}

<div class="text-center">
    <h1 class="display-4">Your Chord Progression</h1>
    @if (Model.RandomProgression != null)
    {
        <div class="card mt-4 mx-auto" style="max-width: 600px;">
            <div class="card-header bg-primary text-white rounded-top">
                <h4 class="mb-0">Song: @Model.RandomProgression.Song</h4>
            </div>
            <div class="card-body">
                <h5 class="card-title text-info">Keys Example: @Model.RandomProgression.KeysExample</h5>
                <p class="card-text">
                    <strong>Tonal:</strong> @Model.RandomProgression.Tonal?.RomanNumerals (relative to @Model.RandomProgression.Tonal?.RelativeTo)
                </p>
                @if (Model.RandomProgression.Modal != null && Model.RandomProgression.Modal.Any())
                {
                    <p class="card-text">
                        <strong>Modal:</strong>
                        @foreach (var modal in Model.RandomProgression.Modal)
                        {
                            <span>@modal.RomanNumerals (relative to @modal.RelativeTo)</span><br />
                        }
                    </p>
                }
                @if (Model.RandomProgression.SubstitutionGroup.HasValue)
                {
                    <p class="card-text"><strong>Substitution Group:</strong> @Model.RandomProgression.SubstitutionGroup</p>
                }
                @if (Model.RandomProgression.PalindromicGroup.HasValue)
                {
                    <p class="card-text"><strong>Palindromic Group:</strong> @Model.RandomProgression.PalindromicGroup</p>
                }
                @if (Model.RandomProgression.RotationGroup.HasValue)
                {
                    <p class="card-text"><strong>Rotation Group:</strong> @Model.RandomProgression.RotationGroup</p>
                }

                <hr />
                @* Display the absolute MIDI progression *@
                @if (Model.AbsoluteProgression != null && Model.AbsoluteProgression.Chords.Any())
                {
                    <h5 class="card-title text-success mt-3">MIDI Pitches:</h5>
                    <p class="card-text">
                        @foreach (var chord in Model.AbsoluteProgression.Chords)
                        {
                            <span>[@string.Join(", ", chord.MidiPitches)]</span>
                            @if (Model.AbsoluteProgression.Chords.IndexOf(chord) < Model.AbsoluteProgression.Chords.Count - 1)
                            {
                                <span> | </span>
                            }
                        }
                    </p>
                    <button id="playMidiButton" class="btn btn-primary btn-lg mt-3">Play MIDI Progression</button>
                    <div id="loadingMessage" class="mt-2 text-muted" style="display:none;">Loading instrument...</div>
                }
                else
                {
                    <p class="alert alert-info mt-3">Could not generate MIDI pitches for this progression.</p>
                }
            </div>
        </div>
        <p class="mt-2">Progression @(Model.CurrentProgressionIndex + 1) of @(Model.ChordService.GetProgressionCount())</p>

    }
    else
    {
        <p class="alert alert-warning mt-4">No chord progression found. Please ensure the 'chordProgressions.json' file is correctly placed in the 'Data' folder and contains valid data.</p>
    }
    <div class="mt-4">
        @* Button to get a new random progression *@
        <a asp-page="/ChordPicker" class="btn btn-success btn-lg mx-2">Get Random Progression</a>

        @* Form for First Progression button *@
        <form method="post" class="d-inline-block">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <button type="submit" asp-page-handler="First" class="btn btn-secondary btn-lg mx-1">First</button>
        </form>

        @* Form for Previous Progression button *@
        <form method="post" class="d-inline-block">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <button type="submit" asp-page-handler="Previous" class="btn btn-info btn-lg mx-1">Previous</button>
        </form>

        @* Form for Next Progression button *@
        <form method="post" class="d-inline-block">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <button type="submit" asp-page-handler="Next" class="btn btn-info btn-lg mx-1">Next</button>
        </form>

        @* Form for Last Progression button *@
        <form method="post" class="d-inline-block">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <button type="submit" asp-page-handler="Last" class="btn btn-secondary btn-lg mx-1">Last</button>
        </form>

        <a asp-page="/Index" class="btn btn-secondary btn-lg mx-2">Back to Home</a>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/soundfont-player@latest/dist/soundfont-player.min.js"></script>
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            const playButton = document.getElementById('playMidiButton');
            const loadingMessage = document.getElementById('loadingMessage');
            let player = null;
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();

            const midiProgressionData = @Html.Raw(Json.Serialize(Model.AbsoluteProgression?.Chords));

            if (playButton && midiProgressionData && midiProgressionData.length > 0) {
                playButton.addEventListener('click', async function () {
                    if (player === null) {
                        loadingMessage.style.display = 'block';
                        playButton.disabled = true;
                        try {
                            player = await Soundfont.instrument(audioContext, 'acoustic_grand_piano');
                            loadingMessage.style.display = 'none';
                            playButton.disabled = false;
                            console.log("Instrument loaded successfully!");
                        } catch (error) {
                            console.error("Error loading soundfont instrument:", error);
                            loadingMessage.textContent = "Error loading instrument. Check console.";
                            return;
                        }
                    }

                    let delay = 0;
                    const chordDuration = 1.0;
                    const noteDuration = 0.9;

                    midiProgressionData.forEach((midiChord, index) => {
                        if (midiChord && midiChord.midiPitches && midiChord.midiPitches.length > 0) {
                            midiChord.midiPitches.forEach(pitch => {
                                player.play(pitch, audioContext.currentTime + delay, { duration: noteDuration });
                            });
                        }
                        delay += chordDuration;
                    });
                });
            } else if (playButton) {
                playButton.disabled = true;
                playButton.textContent = "No MIDI to Play";
            }
        });
    </script>
}
