@page
@model ChordProgressionQuiz.Pages.ChordPickerModel
@{
    ViewData["Title"] = "Your Chord Progression";
}

<div class="text-center">
    <h1 class="display-4">Your Chord Progression</h1>
    @if (Model.RandomProgression != null)
    {
        <div class="card mt-4 mx-auto" style="max-width: 600px;">
            <div class="card-header bg-primary text-white rounded-top">
                <h4 class="mb-0">Song: <span id="songName">@Model.RandomProgression.Song</span></h4>
            </div>
            <div class="card-body">
                <h5 class="card-title text-info">Keys Example: <span id="keysExample">@Model.RandomProgression.KeysExample</span></h5>
                <p class="card-text">
                    <strong>Tonal:</strong> <span id="tonalRomanNumerals">@Model.RandomProgression.Tonal?.RomanNumerals</span> (relative to <span id="tonalRelativeTo">@Model.RandomProgression.Tonal?.RelativeTo)</span>
                </p>
                <div id="modalSection" style="display:none;">
                    <p class="card-text">
                        <strong>Modal:</strong>
                        <span id="modalList">
                        </span>
                    </p>
                </div>
                <p class="card-text"><strong>Substitution Group:</strong> <span id="substitutionGroup">@(Model.RandomProgression.SubstitutionGroup.HasValue ? Model.RandomProgression.SubstitutionGroup.ToString() : "N/A")</span></p>
                <p class="card-text"><strong>Palindromic Group:</strong> <span id="palindromicGroup">@(Model.RandomProgression.PalindromicGroup.HasValue ? Model.RandomProgression.PalindromicGroup.ToString() : "N/A")</span></p>
                <p class="card-text"><strong>Rotation Group:</strong> <span id="rotationGroup">@(Model.RandomProgression.RotationGroup.HasValue ? Model.RandomProgression.RotationGroup.ToString() : "N/A")</span></p>

                <hr />
                @if (Model.AbsoluteProgression != null && Model.AbsoluteProgression.Chords.Any())
                {
                    <div id="baseMidiPitchesSection">
                        <h5 class="card-title text-success mt-3">Base MIDI Pitches:</h5>
                        <p class="card-text" id="baseMidiPitches">
                            @* Content will be populated by JavaScript *@
                        </p>
                    </div>
                    <h5 class="card-title text-primary mt-3">Stylized Playback Details:</h5>
                    <div id="stylizedPlaybackDetailsSection">
                        @if (Model.StylizedProgression != null && Model.StylizedProgression.MidiEvents.Any())
                        {
                            <p class="card-text" id="totalMidiEvents">
                                @* Content will be populated by JavaScript *@
                            </p>
                        }
                        else
                        {
                            <p class="alert alert-info mt-3">No stylized playback data available.</p>
                        }
                    </div>
                    <button id="playMidiButton" class="btn btn-primary btn-lg mt-3">Play MIDI Progression</button>
                    <div id="loadingMessage" class="mt-2 text-muted" style="display:none;">Loading instruments...</div>
                }
                else
                {
                    <p class="alert alert-info mt-3">Could not generate MIDI pitches for this progression.</p>
                }
            </div>
        </div>
        <p class="mt-2" id="progressionIndexCount">Progression @(Model.CurrentProgressionIndex + 1) of @Model.ChordService.GetProgressionCount()</p>

    }
    else
    {
        <p class="alert alert-warning mt-4">No chord progression found. Please ensure the 'chordProgressions.json' file is correctly placed in the 'Data' folder and contains valid data.</p>
    }
    <div class="mt-4 d-flex justify-content-center align-items-center flex-wrap">
        <form method="post" asp-page-handler="ToggleStylizedPlayback" class="d-inline-flex align-items-center mx-2 my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="LoopPlayback" />
            <input type="checkbox" asp-for="EnableStylizedPlayback"
                   onchange="this.form.submit()" class="form-check-input me-1" />
            <label asp-for="EnableStylizedPlayback" class="form-check-label">Enable Stylized Playback</label>
        </form>

        <form method="post" asp-page-handler="ToggleLoopPlayback" class="d-inline-flex align-items-center mx-2 my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="EnableStylizedPlayback" />
            <input type="checkbox"
                   asp-for="LoopPlayback" onchange="this.form.submit()" class="form-check-input me-1" id="loopPlaybackCheckbox" />
            <label asp-for="LoopPlayback" class="form-check-label">Loop Playback</label>
        </form>

        <form method="get" asp-page="/ChordPicker" class="d-inline-block mx-2 my-1">
            <input type="hidden" name="EnableStylizedPlayback" value="@Model.EnableStylizedPlayback.ToString().ToLowerInvariant()" />
            <input type="hidden" name="LoopPlayback" value="@Model.LoopPlayback.ToString().ToLowerInvariant()" />
            <button type="submit" class="btn btn-success btn-lg">Get Random Progression</button>
        </form>

        <form method="post" class="d-inline-block my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="EnableStylizedPlayback" />
            <input type="hidden" asp-for="LoopPlayback" />
            <button type="submit" asp-page-handler="First" class="btn btn-secondary btn-lg mx-1">First</button>
        </form>

        <form method="post" class="d-inline-block my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="EnableStylizedPlayback" />
            <input type="hidden" asp-for="LoopPlayback" />
            <button type="submit" asp-page-handler="Previous" class="btn btn-info btn-lg mx-1">Previous</button>
        </form>

        <form method="post" class="d-inline-block my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="EnableStylizedPlayback" />
            <input type="hidden" asp-for="LoopPlayback" />
            <button type="submit" asp-page-handler="Next" class="btn btn-info btn-lg mx-1">Next</button>
        </form>

        <form method="post" class="d-inline-block my-1">
            <input type="hidden" asp-for="CurrentProgressionIndex" />
            <input type="hidden" asp-for="EnableStylizedPlayback" />
            <input type="hidden" asp-for="LoopPlayback" />
            <button type="submit" asp-page-handler="Last" class="btn btn-secondary btn-lg mx-1">Last</button>
        </form>

        <a asp-page="/Index" class="btn btn-secondary btn-lg mx-2 my-1">Back to Home</a>
    </div>
</div>

@section Scripts {
    <script src="~/js/soundfont-player.min.js"></script>
    <script src="~/js/midiPlayer.js"></script>
    <script src="~/js/chordDisplay.js"></script>
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            const playMidiButton = document.getElementById('playMidiButton');
            const loadingMessage = document.getElementById('loadingMessage');
            const loopPlaybackCheckbox = document.getElementById('loopPlaybackCheckbox');

            // Prepare data for JavaScript
            const progressionData = @Html.Raw(Json.Serialize(Model.StylizedProgression?.MidiEvents ?? new List<StylizedMidiEvent>()));
            const songName = @Html.Raw(Json.Serialize(Model.RandomProgression?.Song)); // Changed to Json.Serialize
            const keysExample = @Html.Raw(Json.Serialize(Model.RandomProgression?.KeysExample)); // Changed to Json.Serialize
            const tonalRomanNumerals = @Html.Raw(Json.Serialize(Model.RandomProgression?.Tonal?.RomanNumerals)); // Changed to Json.Serialize
            const tonalRelativeTo = @Html.Raw(Json.Serialize(Model.RandomProgression?.Tonal?.RelativeTo)); // Changed to Json.Serialize
            const modalList = @Html.Raw(Json.Serialize(Model.RandomProgression?.Modal ?? new List<Modal>()));
            const substitutionGroup = @Html.Raw(Json.Serialize(Model.RandomProgression?.SubstitutionGroup)); // Changed to Json.Serialize, removed HasValue, ToString(), "null"
            const palindromicGroup = @Html.Raw(Json.Serialize(Model.RandomProgression?.PalindromicGroup)); // Changed to Json.Serialize, removed HasValue, ToString(), "null"
            const rotationGroup = @Html.Raw(Json.Serialize(Model.RandomProgression?.RotationGroup)); // Changed to Json.Serialize, removed HasValue, ToString(), "null"
            const absoluteChords = @Html.Raw(Json.Serialize(Model.AbsoluteProgression?.Chords ?? new List<MidiChord>()));
            const totalProgressionDuration = progressionData.length > 0 ?
                Math.max(...progressionData.map(e => e.startTime + e.duration)) : 0;
            const currentProgressionIndex = @Html.Raw(Json.Serialize(Model.CurrentProgressionIndex)); // Changed to Json.Serialize
            const totalProgressionCount = @Html.Raw(Json.Serialize(Model.ChordService.GetProgressionCount())); // Changed to Json.Serialize

            // Populate display using chordDisplay.js
            window.chordDisplay.updateChordDisplay({
                songName: songName,
                keysExample: keysExample,
                tonalRomanNumerals: tonalRomanNumerals,
                tonalRelativeTo: tonalRelativeTo,
                modalList: modalList,
                substitutionGroup: substitutionGroup,
                palindromicGroup: palindromicGroup,
                rotationGroup: rotationGroup,
                absoluteChords: absoluteChords,
                stylizedMidiEvents: progressionData,
                currentProgressionIndex: currentProgressionIndex,
                totalProgressionCount: totalProgressionCount
            });

            // Set initial checkbox state for loopPlayback (server-side model is source of truth)
            if (loopPlaybackCheckbox) {
                // FIXED: Use Json.Serialize to reliably emit a JS boolean literal
                loopPlaybackCheckbox.checked = @Html.Raw(Json.Serialize(Model.LoopPlayback));
            }

            // Playback logic using midiPlayer.js
            if (playMidiButton && progressionData && progressionData.length > 0) {
                playMidiButton.addEventListener('click', async function () {
                    const instrumentsLoaded = await window.midiPlayer.loadInstruments(loadingMessage, playMidiButton);
                    if (instrumentsLoaded) {
                        window.midiPlayer.stopAllNotes();
                        const loopEnabledForPlayback = loopPlaybackCheckbox ? loopPlaybackCheckbox.checked : false;
                        window.midiPlayer.playProgression(progressionData, loopEnabledForPlayback, totalProgressionDuration);
                    }
                });
            } else if (playMidiButton) {
                playMidiButton.disabled = true;
                playMidiButton.textContent = "No MIDI to Play";
            }
        });
    </script>
}